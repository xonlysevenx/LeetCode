class Solution {
    public int[] twoSum(int[] nums, int target) {
        //将数组数据及其索引下标转化为map
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],i);
        }
        //因为确定有唯一解，将目标结果减去所遍历的数组元素，剩下结果如果在数组其他位置存在则表明当前遍历元素与map匹配的另一元素为所求结果。(注意数组可能存在重复元素)
        for(int i=0;i<nums.length;i++){
            int result = target-nums[i];
            if(map.containsKey(result) && map.get(result) !=i){
                return new int[]{i,map.get(result)};
            }
        }
        return new int[]{};
    }
}




/**
    因为有两个for循环，当数组长度较大时，有可能所求的结果坐标就在数组靠前的位置，因此不需要完全将数组转为map，改进后的代码结果如下。
*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int result = target - nums[i];
            if(map.containsKey(result)){
                return new int[]{map.get(result),i};
            }
            map.put(nums[i],i);
        }
        return new int[]{};
    }
}